import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../store/store";
import { getUserAlbumList } from "../../services/albemServices";

export interface UserAlbumState {
  userAlbumList: [{
    userId: number;
    id: number;
    title: string;
  }?];
  status: "idle" | "loading" | "failed";
}

const initialState: UserAlbumState = {
  userAlbumList: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getUserAlbums = createAsyncThunk(
  "getUserAlbum",
  async (id: string | undefined) => {
    if (id) {
      const response = await getUserAlbumList(id);
      // The value we return becomes the `fulfilled` action payload
      return response;
    }
    return false;
  }
);

export const userAlbumSlice = createSlice({
  name: "userAlbum",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUserAlbums.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getUserAlbums.fulfilled, (state, action) => {
        state.status = "idle";
        state.userAlbumList = action.payload;
      })
      .addCase(getUserAlbums.rejected, (state) => {
        state.status = "failed";
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const userAlbumListData = (state: RootState) =>
  state.userAlbum.userAlbumList;

export default userAlbumSlice.reducer;
